from datetime import date, datetime

def format_today() -> str:
    """Create a string representing the current day according to the OS in the
    format: "{Month} {Day}, {Year}" (November 12, 2024)

    Args: 
        None
    Returns:
        str: The formatted string representing the date
    """
    today = date.today()
    return f"{today.strftime('%B')} {today.day}, {today.strftime('%Y')}"

def current_time() -> str:
    """Create a string representing the current date and time in the following
    format: YYYY-MM-DD-HH-MM-SS (using 24 hour time). Used for timestamps of
    reports generated by the program.
    Args:
        None
    Returns:
        str: The formatted string of the date and time
    """
    today = datetime.now()
    return today.strftime("%Y-%m-%d_%H-%M-%S")

def format_address(address1: str, address2: str, city: str, state: str, 
                   zipcode: int, country: str) -> str:
    """Build a string representing an address in US standard format based on the
    provided arguments. (ex. "210 S College Ave, Newark, DE 19716, United 
    States")

    Args:
        address1 (str, optional): The first address line 
        address2 (str, optional): The second address line
        city (str, optional): The city of the location
        state (str, optional): The state or province of the city of the location
        zipcode (int, optional): The zip code of the location
        country (str, optional): The country of the location
    """
    full_address = ""
    if address1:
        full_address += f"{address1}, "
    if address2:
        full_address += f"{address2}, "
    if city:
        full_address += f"{city}, "
    if state:
        full_address += f"{state}, "
    if zipcode:
        full_address += f"{str(zipcode)}, "
    if country:
        full_address += f"{country}"
    return full_address

def format_money(num: int) -> str:
    """Create a string representing a large amount of money rounded to the 
    nearest dollar in a readable format for finance purposes. 
    Example outputs: "$1K", "$10M", "$100B"

    Args:
        num (int): The amount of money rounded to the nearest dollar
    Returns:
        str: The string representing the amount of money
    """
    # Handle negative numbers if necessary:
    sign = "-" if num < 0 else ""
    abs_num = abs(num)
    
    if abs_num >= 1_000_000_000:      # 1,000,000,000 -> B
        return f"{sign}${abs_num // 1_000_000_000}B"
    elif abs_num >= 1_000_000:        # 1,000,000 -> M
        return f"{sign}${abs_num // 1_000_000}M"
    elif abs_num >= 1000:             # 1,000 -> K
        return f"{sign}${abs_num // 1000}K"
    else:                             # < 1,000
        return f"{sign}${abs_num}"